generator drizzle {
    provider = "prisma-generator-drizzle"

    output = "../src/database/tables"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Bot {
    id               String   @id
    name             String
    avatar           String?
    certified        Boolean  @default(false)
    banner           String?
    /// drizzle.type @database/enums::BotStatus
    /// drizzle.default @database/enums::BotStatus `() => BotStatus.PENDING`
    status           String   @default("PENDING")
    description      String
    shortDescription String   @map("short_description")
    prefix           String?
    github           String?
    inviteLink       String?  @map("invite_link")
    supportServer    String?  @map("support_server")
    website          String?
    guildCount       Int      @default(0) @map("guild_count")
    apikey           String?  @map("api_key")
    importedFrom     String?  @map("imported_from")
    /// drizzle.type @modules/bot/objects/bot/bot.user.permissions::BotUserPermissions
    userPermissions  Json[]   @map("user_permissions")
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
    //
    reviews          Review[]
    votes            Vote[]
    webhook          Webhook?
    tags             Tag[]
    owners           User[]

    @@map("bots")
}

model Badge {
    id          Int      @id @default(autoincrement())
    name        String
    displayName String   @map("display_name")
    description String
    icon        String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
    //
    users       User[]

    @@index([name])
    @@map("badges")
}

model Review {
    id        Int      @id @default(autoincrement())
    botId     String   @map("bot_id")
    userId    String   @map("user_id")
    rating    Int
    content   String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
    //
    bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([botId, userId])
    @@map("reviews")
}

model User {
    id          String    @id
    username    String
    avatar      String?
    banner      String?
    bio         String?
    permissions Int       @default(0)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
    //
    reviews     Review[]
    sessions    Session[]
    votes       Vote[]
    badges      Badge[]
    bots        Bot[]

    @@map("users")
}

model Session {
    userId       String   @id @map("user_id")
    refreshToken String   @map("refresh_token")
    accessToken  String   @map("access_token")
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
    //
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Tag {
    id          String   @id
    displayName String   @map("display_name")
    // description String maybe?
    createdAt   DateTime @default(now()) @map("created_at")
    //
    bots        Bot[]

    @@map("tags")
}

model Vanity {
    id       String @id
    targetId String @map("target_id")
    userId   String @map("user_id")
    /// drizzle.type @database/enums::VanityType
    type     String

    @@index([userId])
    @@map("vanities")
}

model Vote {
    id      Int    @id @default(autoincrement())
    botId   String @map("bot_id")
    userId  String @map("user_id")
    expires BigInt @map("expires")
    //
    bot     Bot    @relation(fields: [botId], references: [id], onDelete: Cascade)
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("votes")
}

model Webhook {
    id            String   @id
    url           String   @unique
    secret        String
    /// drizzle.type @database/enums::WebhookEvent
    /// drizzle.default @database/enums::WebhookEvent `() => [WebhookEvent.ALL_EVENTS]`
    events        String[] @default([])
    /// drizzle.type @database/enums::WebhookPayloadField
    payloadFields String[] @default([]) @map("payload_fields")
    //
    bot           Bot      @relation(fields: [id], references: [id], onDelete: Cascade)

    @@map("webhooks")
}
